var tipuesearch = {"pages": [{'title': 'About', 'text': '\n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Website', 'text': 'Github :  https://github.com/40923107/cp2020 \n Gitlab :\xa0 https://gitlab.com/gitlab-org/gitlab \n', 'tags': '', 'url': 'Website.html'}, {'title': 'HW1', 'text': '', 'tags': '', 'url': 'HW1.html'}, {'title': 'Pc Hardware', 'text': '', 'tags': '', 'url': 'Pc Hardware.html'}, {'title': 'PCH 4 Cases, Form Factors, and Power Supplies(外殼，外形尺寸和電源)(P.37~P.41)', 'text': '\n Learning objective 學習目標 \n \n • Describe common computer case designs and features. \n \xa0 描述常見的計算機機箱設計和功能。 \n • Describe common motherboard form factors and suitable cases for each. \n \xa0 描述常見的主板外形尺寸和適用的機箱。 \n • Identify power supply connectors. \n \xa0 識別電源連接器。 \n • Recommend and install an appropriate power supply given specific hardware to be powered. \n \xa0 根據要供電的特定硬件，建議並安裝適當的電源。 \n • Disassemble and reassemble computers in the most common case designs. \n \xa0 在最常見的案例設計中，拆卸並重新組裝計算機。 \n • Test power supplies to ascertain proper functioning. \n \xa0 測試電源以確定功能正常。 \n \xa0 \n', 'tags': '', 'url': 'PCH 4 Cases, Form Factors, and Power Supplies(外殼，外形尺寸和電源)(P.37~P.41).html'}, {'title': 'Computer Cases 電腦機箱 (P.38)', 'text': '\n Learning Objectives 學習目標 \n \n • Describe common computer case designs and features. \n \xa0 描述常見的計算機機箱設計和功能。 \n \n • Describe common motherboard form factors and suitable cases for each. \n \xa0 描述常見的主板外形尺寸和適用的機箱。 \n \xa0 \n In this lesson, we are going to cover the various cases available for computers, several form factors or layouts of the motherboards, and the different types of power supplies that we use to provide direct current (DC) to the computer’s components. \n 在本課程中，我們將介紹計算機可用的各種情況，主板的幾種外形尺寸或佈局以及用於為計算機組件提供直流（DC）的不同類型的電源。 \n \n From the outside, almost all computers looked the same for a long time, but contemporary systems have really changed the size and shape of the cases available. The most common cases are mid-size or mini-towers, while some people, mostly gamers, still like full-sized towers. Some cases are made in a small form factor (SFF) to be easily carried for portability or to match an entertainment system like a DVD player in size. Servers are often contained in very long and narrow cases that usually range in size from one unit tall (a few inches) to two units tall (about 6-8 inches). Each of these cases provide us with a distinct layout of the motherboard they will accept. This layout is called a form factor. Larger case sizes allow for additional devices (such as hard disk drives and optical drives). The type of case will depend on the customer’s needs. \n \n 從外部看，幾乎所有計算機在很長一段時間內看起來都是一樣的，但是現代系統確實改變了可用機箱的大小和形狀。 最常見的情況是中型或小型塔，而有些人（大多是遊戲玩家）仍然喜歡全尺寸塔。 某些情況下，它們採用小巧的外形（SFF）製成，以便攜帶方便或與DVD播放器等娛樂系統相匹配。 服務器通常裝在非常狹長的情況下，大小通常從一個單位高（幾英寸）到兩個單位高（約6-8英寸）不等。 這些情況中的每一種都為我們提供了可接受的主板佈局。 此佈局稱為形狀因數。 較大的機箱尺寸允許使用其他設備（例如硬盤驅動器和光盤驅動器）。 案例的類型將取決於客戶的需求。 \n \n \n \n Motherboards and Processors 主板和處理器 \n Form Factor 構成因素 \n \n The size and arrangement of the motherboard is described as the form factor. The ATX form factor is one of the most widely used form factors in contemporary computers. It has been in use since the 1990s. The ATX form factor contains a rear port cluster for its integrated ports (audio, video, sound, network, etc.). The expansion slots run parallel to the short side of the board, and the cases have a left-side case opening to support easily adding expansion cards. \n \n 母板的尺寸和排列方式描述為外形尺寸。 ATX規格是現代計算機中使用最廣泛的規格之一。 自1990年代以來一直在使用。 ATX外形尺寸包含一個用於集成端口（音頻，視頻，聲音，網絡等）的後端口群集。 擴展插槽平行於電路板的短邊，並且機箱的左側殼體開口可輕鬆添加擴展卡。 \n \n \n ATX form factor motherboard.\xa0ATX尺寸主板。 \n \n The mini-ATX form factor is smaller in size than the ATX form factor, but still contains many of the ATX features, such as a rear port cluster for its integrated ports (audio, video, sound, network, etc.). The expansion slots run parallel to the short side of the board, and the cases have a left-side case opening to support easily adding expansion cards. \n \n 微型ATX尺寸比ATX尺寸小，但仍包含許多ATX功能，例如用於集成端口（音頻，視頻，聲音，網絡等）的後部端口集群。 擴展插槽平行於電路板的短邊，並且機箱的左側殼體開口可輕鬆添加擴展卡。 \n \n As shown in the table below, there are many variations of the ATX form factor, with the main difference being the physical size of the board and the number of expansion slots. Bigger boards allow for additional expansion slots, but require a larger tower. \n \n 如下表所示，ATX尺寸因數而異，主要區別在於主板的物理尺寸和擴展插槽的數量。 更大的板可提供額外的擴展插槽，但需要更大的塔架。 \n \n \n \n \n The ITX form factor was created in 2001. The ITX form factor itself was not very popular, but a variant called the mini-ITX became quite popular, since it also fit into ATX-style cases. It also contains a rear port cluster for its integrated ports (audio, video, sound, network, etc.). The expansion slots run parallel to the short side of the board, and the cases have a left-side case opening to support easily adding expansion cards, just like the ATX boards. Smaller variations, called pico-ITX and nano-ITX, are often used in computing appliances such as smart televisions, Internet-connected set-top devices designed to integrate with TV sets, and others . \n \n \n ITX尺寸規格創建於2001年。ITX尺寸規格本身並不十分流行，但是一個名為mini-ITX的變體就變得非常流行，因為它也適用於ATX風格的機殼。 它還為集成端口（音頻，視頻，聲音，網絡等）包含一個後部端口集群。 擴展插槽平行於板子的短邊延伸，並且外殼具有左側的外殼開口，以支持輕鬆添加擴展卡，就像ATX板一樣。 較小的變體，稱為pico-ITX和nano-ITX，通常用於計算設備中，例如智能電視，旨在與電視機集成的互聯網連接的機頂盒設備等。 \n \n \n \n \n Small form factor motherboard.\xa0小型主板。 \n \n I/O Ports (I / O端口) \n \n Rear port clusters provide an area of the motherboard dedicated to input and output ports, which are integrated into the motherboard’s circuitry. This allows the motherboard manufacturer to provide onboard services for things like USB, Ethernet, audio, mouse/keyboard ports, eSATA, and more. Older motherboards provided legacy connections, such as serial COM (communication) ports, parallel LPT (line print terminal) ports, and game ports. \n \n 後部端口集群為主板提供了專用於輸入和輸出端口的區域，這些區域已集成到主板的電路中。 這使主板製造商可以為USB，以太網，音頻，鼠標/鍵盤端口，eSATA等提供板載服務。 較舊的主板提供了舊式連接，例如串行COM（通信）端口，並行LPT（行式打印終端）端口和遊戲端口。 \n \n \n \n \n \n Ports in a motherboard port cluster. \xa0\xa0主板端口集群中的端口。 \n \n \n \n', 'tags': '', 'url': 'Computer Cases 電腦機箱 (P.38).html'}, {'title': 'Power Supplies 電源 (P.39)', 'text': '\n Learning Objectives 學習目標 \n \n •\xa0 Identify power supply connectors. \n \xa0 \xa0識別電源連接器。 \n \n •\xa0Recommend and install an appropriate power supply given specific hardware to be powered. \n \xa0 \xa0根據要供電的特定硬件，建議並安裝適當的電源。 \n \n Power supply units (PSUs) are required in all computer systems, since computers are designed to run on direct current (DC), but our home and office outlets only provide alternating current (AC). For a computer to run well, it requires good, clean power from the outlet to the computer’s PSU. The PSU then converts the AC input into DC output to the various subsystems of the computer at the necessary voltages. The PSU creates heat in this transformation from AC to DC. Therefore, a good power supply fan is essential to remove the heat from the PSU and computer system. A power supply is a field replaceable unit (FRU) and should be replaced — never repaired — because the capacitors will hold voltage well after the PSU has been unplugged. \n \n 所有計算機系統都需要電源單元（PSU），因為計算機被設計為以直流電（DC）運行，但是我們的家庭和辦公室插座僅提供交流電（AC）。 為了使計算機正常運行，需要從插座到計算機PSU的電源乾淨整潔。 然後，PSU將交流輸入轉換為直流輸出，並在必要的電壓下將其輸入計算機的各個子系統。 PSU在從AC轉換為DC的過程中會產生熱量。 因此，良好的電源風扇對於消除PSU和計算機系統的熱量至關重要。 電源是一個現場可更換單元（FRU），應進行更換（切勿修理），因為在拔下PSU後電容器將保持良好的電壓。 \n \n \n Computer PSU, showing a space for the fan and an electric cord input. \n 計算機電源模塊，顯示風扇和電線輸入的空間。 \n \n Power supplies are rated in watts, with contemporary computer systems requiring 400 watts of power or more. Every device inside the computer requires power and receives it from the PSU. Therefore, the more devices there are inside the computer, the more power that is required from the power supply.\xa0 \n \n 電源的額定功率為瓦特，當代計算機系統需要400瓦特或更高的功率。 計算機內部的每個設備都需要電源，並從PSU接收電源。 因此，計算機中存在的設備越多，電源所需要的功率就越大。 \n \n A technician should verify that the backward “UR” logo\xa0  appears on the power supply, since this indicates that the power supply has been properly safety tested. When purchasing a new computer, the power supply will already have been selected based on the initial configuration of the machine, but if you are adding new components to the workstation, you will need to verify that the power supply has enough wattage to support the existing and new components. To do this, you need to determine the wattage by adding all the devices’ wattage together. If the device is measured in amps, multiply amps times voltage (A x V) to calculate the watts. Power supplies are not 100 percent efficient, nor are they rated to be 100 percent efficient. Therefore, you should always keep the total wattage under 70 percent of the rated wattage of the power supply to ensure proper computer operations. \n \n 技術人員應驗證電源上是否有向後的“ UR”徽標，因為這表明電源已經過正確的安全測試。 購買新計算機時，將已經根據計算機的初始配置選擇了電源，但是如果您要向工作站添加新組件，則需要驗證電源是否具有足夠的功率以支持現有電源。 和新組件。 為此，您需要通過將所有設備的瓦數相加來確定瓦數。 如果設備以安培為單位測量，則將安培乘以電壓（A x V）以計算瓦數。 電源效率不是100％，也不是額定為100％。 因此，應始終將總功率保持在電源額定功率的70％以下，以確保計算機正常運行。 \n \n \n Power supply specifications. 電源規格 \n \n Dual Voltage\xa0雙電壓 \n \n Most of today’s computers are built around the world with different voltages. In the United States, power is delivered at 115–120 VAC (voltage alternating current) at 60 hertz. In Europe and Asia, the typical wall outlet provides 230–240 VAC at 50 hertz. If the power supply supports dual voltage, you need to ensure the correct setting is selected. In that situation, there should be a slider button that allows you to select the proper voltage. Slide the button to the appropriate voltage before plugging the power supply into the wall or damage to the computer can occur. \n \n 當今大多數計算機都是在世界各地以不同的電壓構建的。在美國，功率在60赫茲的115-120 VAC（交流電壓）下輸送。在歐洲和亞洲，典型的壁裝電源插座以50赫茲提供230-240 VAC。如果電源支持雙電壓，則需要確保選擇正確的設置。在這種情況下，應該有一個滑塊按鈕，可讓您選擇合適的電壓。在將電源插頭插入牆上之前，請將按鈕滑動至適當的電壓，否則可能會損壞計算機。 \n \n What do you think would happen if we selected the wrong voltage before plugging it in? Well, if we are in Europe and expecting 230 VAC from the wall, but set the switch to 110 VAC (the United States standard), the power supply would receive an overvoltage condition, damaging the power supply and possibly starting a fire. If instead we took a European PC, which expects 230 VAC, and plugged it into a United States electrical outlet providing 110 VAC, we would get an undervoltage condition, and the computer would not start up. \n \n 如果我們在插入之前選擇了錯誤的電壓，您會怎麼辦？好吧，如果我們在歐洲並期望牆壁有230 VAC的電壓，但將開關設置為110 VAC（美國標準），則電源將出現過壓狀況，從而損壞電源並可能引發火災。如果取而代之的是，我們帶了一個歐洲PC，該PC期望提供230 VAC的電源，然後將其插入提供110 VAC的美國電源插座，則將出現欠壓情況，並且計算機將無法啟動。 \n \n \n Power supply port and on/off switch within a metal honeycomb mesh to allow for power supply ventilation. \n 金屬蜂窩網內的電源端口和開/關開關可允許電源通風。 \n \n', 'tags': '', 'url': 'Power Supplies 電源 (P.39).html'}, {'title': 'Power Supply Connectors\xa0電源連接器(P.40)', 'text': '\n Learning Objectives 學習目標 \n \n •\xa0 Identify power supply connectors. \n \xa0 \xa0識別電源連接器。 \n \n ATX 12V 2.x power supplies connect to the motherboard by way of a 24-pin cable + 4-pin/8-pin for CPU and 6- or 8-pin for PCIe video. \n ATX 12V 2.x電源通過24針電纜+ 4針/ 8針（用於CPU）和6或8針（用於PCIe視頻）連接到主板。 \n \n The purpose of a "dual-rail" PSU is to separate and limit the current through each wire to avoid overheating. \n “雙軌” PSU的目的是分離並限制通過每條電線的電流，以避免過熱。 \n \n Originally, the ATX 1.x standard required 20 pins to provide the mainboard (motherboard) power connection. ATX version 2.x expanded this to 24 pins for a standard ATX12V power supply. Many power supplies will provide a 20+4 pin cable, so that they are backward compatible with older systems. \n 最初，ATX 1.x標準需要20個引腳來提供主板（主板）電源連接。 ATX版本2.x將其擴展為24引腳，用於標準ATX12V電源。 許多電源將提供20 + 4針電纜，以便它們與較早的系統向後兼容。 \n \n With the higher voltage requirements of the Pentium 4 and onward, the ATX version 2.x standard made this a 24-pin cable +4 pin (original mini-ATX or P4 connector) or an EPS12 8-pin connector. The ATX12V provides a four-wire square connector for additional motherboard power. ESP12V provides an eight-wire connector (often split into two four-wire connectors for backward compatibility) for additional CPU power. Finally, there is the AUX connector, a six-wire connector to provide older systems with extra power to the motherboard. \n 隨著奔騰4及更高版本對電壓的更高要求，ATX 2.x版標準將其設置為24針電纜+4針（原始的mini-ATX或P4連接器）或EPS12 8針連接器。 ATX12V提供一個四線方形連接器，用於增加主板電源。 ESP12V提供了一個八線連接器（為了便於向後兼容，通常分為兩個四線連接器），以提供更多的CPU電源。 最後，還有AUX連接器，這是六線連接器，可為較舊的系統提供額外的電源給主板。 \n \n ATX12V version 2.x eliminated the 3.3V and 5.5V rails in favor of 12V rails due to the nature of CPU and PCIe power requirements. The ATX standards from version 2.x on have all developed to improve power delivery. The 12V\xa0 dual-rail \xa0 PSU is designed to limit over voltage situations and protect against overheating. \n 隨著奔騰4及更高版本對電壓的更高要求，ATX 2.x版標準將其設置為24針電纜+4針（原始的mini-ATX或P4連接器）或EPS12 8針連接器。 ATX12V提供一個四線方形連接器，用於增加主板電源。 ESP12V提供了一個八線連接器（為了便於向後兼容，通常分為兩個四線連接器），以提供更多的CPU電源。 最後，還有AUX連接器，這是六線連接器，可為較舊的系統提供額外的電源給主板。 \n \n \n \n \n Power Cable\xa0電源線 \n Application\xa0應用 \n Pinouts/Voltage\xa0引腳排列/電壓 \n \n \n \n \n \n \n \n \n IDE/EIDE PATA devices (HDD/ODD); Case Fans; PCI/PCIe Expansion cards requiring external power (i.e., USB, Firewire, Thunderbolt) \n \n IDE / EIDE PATA設備（HDD / ODD）; 機箱風扇； 需要外部電源（例如USB，Firewire，Thunderbolt）的PCI / PCIe擴展卡 \n \n \n Red (+5V), Yellow (+12V), Black (G), Black (G) \n \n 紅色（+ 5V），黃色（+ 12V），黑色（G），黑色（G） \n \n \n \n \n \n \n \n SATA Devices (HDD/ODD); PCI/PCIe Expansion cards requiring external power (i.e., USB, Firewire, Thunderbolt) \n \n SATA設備（HDD / ODD）; 需要外部電源（例如USB，Firewire，Thunderbolt）的PCI / PCIe擴展卡 \n \n \n 15-pin (+3.3 V, +5V, +12V) \n \n 15針（+3.3 V，+ 5V，+ 12V） \n \n \n \n \n \n \n \n PCI Express Video Cards – 6 or 8 pins \n \n PCI Express視頻卡– 6或8針 \n \n \n 6-pin (+12 v) (ATX12V Vers. 2.1) \n 8-pin (+12 v) (ATX12V Vers. 2.2) \n or later \n \n 6針（+12 v）（ATX12V版本2.1） \n 8針（+12 v）（ATX12V Vers.2.2） \n 或以後 \n \n \n \n \n \n \n \n \n Power supply wires.\xa0電源線。 \n \n In addition to the motherboard needing power to function, peripherals need power to function, too. The power supply provides additional connectors for peripherals used throughout the computer system. The oldest style connector is the Molex connector and is used for PATA hard drives, PATA CD/DVD drives, and extra cooling fans. The Molex is a four-pin connector that is usually one of the largest connectors. A mini-Molex or Berg connector is a four-pin connector that is rather small and only used for floppy disk drives, specifically the 3.5-inch variant of drive. SATA devices use SATA power cables, which are 15-pin L-shaped connectors. PCIe power connectors (peripheral component interconnect express) are six-pin or eight-pin connectors that are used to provide additional power to PCIe video cards at 12 VDC. Finally, if you run out of connectors of a certain type, there are conversion cables to make a Molex into SATA, or Molex into PCIe. Additionally, there exist Y-connectors for Molex that allow a single Molex to be split into two Molex connectors. As you remember, power supplies convert AC to DC power to provide power to the devices. These connectors have either +/-3.3 VDC, +/- 5 VDC, or +/- 12 VDC. \n \n 除了主板需要電源才能工作之外，外圍設備也需要電源才能工作。電源為整個計算機系統中使用的外圍設備提供了額外的連接器。最古老的連接器是Molex連接器，用於PATA硬盤驅動器，PATA CD / DVD驅動器和額外的冷卻風扇。 Molex是四針連接器，通常是最大的連接器之一。微型Molex或Berg連接器是一個四針連接器，它很小，僅用於軟盤驅動器，尤其是3.5英寸驅動器。 SATA設備使用SATA電源線，該電源線是15針L形連接器。 PCIe電源連接器（外圍組件互連Express）是六針或八針連接器，用於為12 VDC的PCIe視頻卡提供額外的電源。最後，如果您用完了某種類型的連接器，也可以使用轉換電纜將Molex轉換為SATA，或將Molex轉換為PCIe。此外，還存在用於Molex的Y型連接器，該連接器可將單個Molex分為兩個Molex連接器。您還記得，電源將交流電轉換為直流電，以便為設備供電。這些連接器具有+/- 3.3 VDC，+ /-5 VDC或+/- 12 VDC。 \n \n', 'tags': '', 'url': 'Power Supply Connectors\xa0電源連接器(P.40).html'}, {'title': 'Remove A Power Supply\xa0卸下電源(P.41)', 'text': '\n Learning objective 學習目標 \n \n • Disassemble and reassemble computers in the most common case designs. \n \xa0 \xa0在最常見的案例設計中，拆卸並重新組裝計算機。 \n •\xa0Recommend and install an appropriate power supply given specific hardware to be powered. \n \xa0 根據要供電的特定硬件，建議並安裝適當的電源。 \n • \xa0 Test power supplies to ascertain proper functioning. \n \xa0 測試電源以確定功能正常。 \n \n To remove the power supply, first you must power down the computer. Next, you want to verify the power switch is in the off position, and disconnect the power cord from the wall and from the machine. You can then open the case by removing the screens, and then disconnect all power supply cables from all the devices in the computer. Next, you will remove all the screws holding the PSU in place and lift or slide out the power supply from the workstation. \n \n \n Power supply unit.\xa0\xa0供電單元。 \n \n Replace A Power Supply\xa0更換電源 \n \n To replace a PSU, you would need to verify the proper wattage for the new power supply and slide the power supply into the case. You then need to screw the power supply into place and connect all the power supply cables to the various internal components. Next, you should check the voltage setting and make sure it is set to 110 VAC for North America or 230 VAC for European/Asian countries. Connect your power cord to the power supply and turn on the computer. If the computer works properly, you can then close the case and secure the enclosure with screws. \n \n 要更換PSU，您需要驗證新電源的合適功率，並將電源滑入機箱。 然後，您需要將電源固定到位，並將所有電源電纜連接到各種內部組件。 接下來，您應該檢查電壓設置，並確保將其設置為北美的110 VAC或歐洲/亞洲國家的230 VAC。 將電源線連接到電源，然後打開計算機。 如果計算機正常運行，則可以合上機箱並用螺釘固定機箱。 \n \n Test a Power Supply\xa0測試電源 \n \n In order to test a PSU, you can use either a multimeter or a power supply tester. While a multimeter would work, you must be able to know the exact pinout for each type of connector and the amount of voltage to expect from each pin. Instead, it is much simpler to buy one of many different computer power supply testers on the market today. Small LEDs light up to let you know if the power feeds are working correctly. The motherboard power tester also beeps to let you know it is receiving the correct amount of power. This device is a must for anyone who wants to be able to test power supplies quickly and easily. To use it, simply hook up the motherboard power connector (20+4 connector) to the right side of the tester. Next, hook up the power connector for the device (SATA, Molex, Berg, etc.) to the left hand side of the tester. The lights will show up green if you are receiving the proper voltages (3, 5, 12 VDC). \n \n 為了測試PSU，可以使用萬用表或電源測試儀。 儘管萬用表可以工作，但您必須能夠知道每種連接器的確切引腳排列以及每個引腳的預期電壓量。 相反，購買當今市場上許多不同的計算機電源測試儀之一要簡單得多。 小型LED會亮起，以告知電源是否正常工作。 主板電源測試儀還會發出嗶嗶聲，以通知您它正在接收正確數量的電源。 對於希望能夠快速輕鬆地測試電源的任何人來說，此設備都是必需的。 要使用它，只需將主板電源連接器（20 + 4連接器）連接到測試儀的右側即可。 接下來，將設備（SATA，Molex，Berg等）的電源連接器連接到測試儀的左側。 如果您接受適當的電壓（3、5、12 VDC），則指示燈將呈綠色亮起。 \n \n \n Power supply tester.\xa0\xa0電源測試儀。 \n \n', 'tags': '', 'url': 'Remove A Power Supply\xa0卸下電源(P.41).html'}, {'title': 'PCH 5\xa0Motherboards, Expansion Buses, and Processors (主板，擴展總線和處理器)(P.42~47)', 'text': '\n Learning objective 學習目標 \n \n •\xa0Identify motherboard components and describe their basic functions. \n \xa0 \xa0識別主板組件並描述其基本功能。 \n •\xa0 Place an array of microprocessors in approximate date or performance order. \n \xa0 \xa0將微處理器陣列按大約日期或性能順序放置。 \n •\xa0Compare current microprocessor speeds and capabilities with those of 10 and 20 years ago, and describe the effect of processing capabilities. \n \xa0 將當前微處理器的速度和功能與10年前和20年前的速度和功能進行比較，並描述處理能力的影響。 \n \n', 'tags': '', 'url': 'PCH 5\xa0Motherboards, Expansion Buses, and Processors (主板，擴展總線和處理器)(P.42~47).html'}, {'title': 'Motherboards and Components\xa0主板和組件 (P.43)', 'text': '\n Learning objective 學習目標 \n \n •\xa0Identify motherboard components and describe their basic functions.\xa0 \n \xa0 \xa0識別主板組件並描述其基本功能。 \n \n In this lesson, we will cover the purpose and function of the motherboard. We will also cover central processing units (CPUs) and the various technologies that exist to provide specialized functionality for CPUs, such as virtualization, hyperthreading, and multicore processors. Finally, we will cover the various methods of CPU cooling available, such as active and passive heat sinks, as well as liquid cooling. \n \n 在本課程中，我們將介紹主板的用途和功能。 我們還將介紹中央處理器（CPU）和為CPU提供專門功能的各種技術，例如虛擬化，超線程和多核處理器。 最後，我們將介紹可用的各種CPU冷卻方法，例如主動和被動散熱器以及液體冷卻。 \n \n Motherboards are the foundation of the computer. The motherboard acts like a city block and the bus is like the streets. The components are like the buildings in the city, so that if you want to go from one building to another (or in our case if we want information to flow from one component to another), it has to travel across the bus (the streets). The bus is what physically connects the various components of the motherboard to each other, allowing information to flow into and out of the various computer components. Motherboards come in a variety of shapes, sizes, and layouts; the specific shape, size, and layout of a motherboard is called its form factor. The motherboard is one of the most important computer components, since every other component plugs into the motherboard, either into a dedicated socket (such as the CPU), an expansion slot (used for various expansion cards), or a connector (such as SATA storage devices and audio inputs/outputs). The motherboard truly is the central meeting point for all the components in the computer. \n \n 主板是計算機的基礎。主板就像一個街區，公交車就像街道。這些組件就像城市中的建築物，因此，如果您要從一棟建築物轉到另一棟建築物（或者在我們的情況下，如果我們希望信息從一個組件流向另一組件），則它必須穿越公交車（街道） ）。總線是物理上將主板的各個組件彼此連接的總線，允許信息流入和流出各個計算機組件。主板有各種形狀，大小和佈局。主板的特定形狀，大小和佈局稱為其外形尺寸。主板是最重要的計算機組件之一，因為所有其他組件都可以插入主板，無論是插入專用插槽（例如CPU），擴展槽（用於各種擴展卡）還是連接器（例如SATA）存儲設備和音頻輸入/輸出）。主板確實是計算機中所有組件的主要集合點。 \n \n \n Motherboard.\xa0母板。 \n \n Before we begin talking about the motherboard itself, we want to have a basic understanding of the various components that can connect to the motherboard. We will go into detail on each of these components in future lessons, but let’s take a look at some of the key components on a motherboard. \n \n 在開始討論主板本身之前，我們希望對可以連接到主板的各種組件有基本的了解。 在以後的課程中，我們將詳細介紹這些組件中的每一個，但讓我們看一下主板上的一些關鍵組件。 \n \n Diagram of a motherboard.\xa0主板圖。 \n \n \n Look at the figure above of a motherboard, with specific components identified. Let’s examine each component more closely \n \n 查看上面的主板圖，其中標識了特定的組件。 讓我們更仔細地檢查每個組件 \n \n \n \n \n \n \n \n Component Name \n 組件名稱 \n \n \n Function \n 功能 \n \n \n \n \n PCI expansion slots \n PCI擴充插槽 \n \n \n These allow us to add capabilities to our computers, such as extra USB ports, a new sound card, a modem or network card, and many others. This is a universal card slot that all manufacturers can use when building their cards using a common specification. \n 這些使我們能夠為計算機添加功能，例如額外的USB端口，新的聲卡，調製解調器或網卡等。 這是一個通用卡插槽，所有製造商都可以在使用通用規範構建卡時使用。 \n \n \n \n \n PCIe x1 (PCI express size 1) slot \n PCIe x1（PCI Express大小1）插槽 \n \n \n This particular motherboard has three of these slots, but this varies from board to board based on its particular form factor. These are the newer slots that are much faster than the older PCI slot. PCIe stands for PCI express, and the x1 indicates that there is one dedicated serial data connection (lane). PCIe comes in a variety of sizes, such as x1, x4, x8, and x16. \n 該特定的主板具有其中三個插槽，但是根據其特定的形狀因板而異。 這些是較新的插槽，比舊的PCI插槽快得多。 PCIe代表PCI Express，x1表示存在一個專用的串行數據連接（通道）。 PCIe具有多種尺寸，例如x1，x4，x8和x16。 \n \n \n \n \n PCIe x16 (PCI express size 16) slot \n PCIe x16（PCI Express尺寸16）插槽 \n \n \n These are newer slots that are much faster than the older PCI slot. PCIe stands for PCI express, and the x16 indicates that there are 16 serial lanes. PCIe comes in a variety of sizes, such as x1, x4, x8, and x16. \n 這些是較新的插槽，比舊的PCI插槽快得多。 PCIe代表PCI Express，x16表示有16個串行通道。 PCIe具有多種尺寸，例如x1，x4，x8和x16。 \n \n \n \n \n Rear input/output cluster \n 後置輸入/輸出集群 \n \n \n Each motherboard can offer dedicated, integrated features, such as network cards, sound card, video cards, and a variety of input/output ports all “clustered” together on the board. These components cannot be changed out since they are soldered to the motherboard. \n 每個主板都可以提供專用的集成功能，例如網卡，聲卡，視頻卡以及各種輸入/輸出端口，這些功能都“聚集”在板上。 這些組件已焊接到主板上，因此無法更改。 \n \n \n \n \n CPU socket \n CPU插槽 \n \n \n The CPU socket is where the central processing unit (the brains of the computer) is inserted. \n CPU插槽是插入中央處理器（計算機的大腦）的位置。 \n \n \n \n \n Memory slots \n 內存插槽 \n \n \n These slots are where extra random access memory (RAM) is inserted to provide capacity to the computer. \n 這些插槽是在其中插入額外的隨機存取存儲器（RAM）以便為計算機提供容量的位置。 \n \n \n \n \n 24-pin main power connector \n 24針主電源連接器 \n \n \n This 24-pin main power connector is what powers the entire motherboard. \n 這個24針主電源連接器為整個主板供電。 \n \n \n \n \n \n \n', 'tags': '', 'url': 'Motherboards and Components\xa0主板和組件 (P.43).html'}, {'title': 'Expansion Slots\xa0擴展插槽 (P.44)', 'text': '\n Learning objective 學習目標 \n \n • Identify motherboard components and describe their basic functions. \n \xa0 識別主板組件並描述其基本功能。 \n \n Expansion slots allow for additional functionality of the computer system. An expansion card is inserted into the expansion slot. There are many different types of expansion slots on a motherboard. The function of each of these types of slots will be discussed in far greater detail in a future module. Below is a brief summary of the most common types of expansion slots. \n \n 擴展插槽可提供計算機系統的其他功能。 擴展卡已插入擴展槽。 主板上有許多不同類型的擴展插槽。 這些類型的插槽中的每一個的功能將在以後的模塊中進行更詳細的討論。 以下是最常見的擴展插槽類型的簡要概述。 \n \n • \xa0 PCI — The conventional peripheral component interconnect slot, commonly referred to using its acronym. \n \xa0 \xa0PCI —傳統的外圍組件互連插槽，通常使用其縮寫詞來指代。 \n \n • \xa0 PCI-X — A faster, 64-bit version of the PCI slot running at a bus speed of 133 MHz. \n \xa0 \xa0PCI-X — PCI插槽的更快的64位版本，以133 MHz的總線速度運行。 \n \n • \xa0 AGP — A dedicated graphics channel (bus) designed to be separate from the shared PCI bus. This allowed advances in 3D game design, hardware acceleration, and video playback. \n \xa0 \xa0AGP —專用於與共享PCI總線分開的專用圖形通道（總線）。 這使得3D遊戲設計，硬件加速和視頻播放方面有了進步。 \n \n • \xa0 PCIe — PCI express speeds exceed AGP speeds, and PCIe provides a singular slot type for all devices. \n \xa0 \xa0PCIe — PCI Express的速度超過了AGP的速度，並且PCIe為所有設備提供了單個插槽類型。 \n \n • \xa0 AMR — The audio modem riser card is a specific type of card used to fit additional cards into a compact space. \n \xa0 \xa0AMR —音頻調製解調器轉接卡是一種特殊類型的卡，用於將其他卡裝入緊湊的空間。 \n \n • \xa0 CNR — The communications network riser replaced the AMR, and allows for six-channel digital audio, networking functions, and other high-quality integrated audio support on a riser card. \n \xa0 \xa0CNR —通信網絡轉接卡取代了AMR，並在轉接卡上支持六通道數字音頻，網絡功能和其他高質量的集成音頻支持。 \n \n Chipset\xa0芯片組 \n \n The chipset determines which CPUs a system can use, which integrated ports a system provides, and the type of expansion slots included in the motherboard. Where the motherboard’s form factor dictates the specific size, shape, and layout, the chipset determines what technologies are integrated into the board itself. Each chipset defines the memory controller, and specifies what kind of RAM can be used with the motherboard. This includes the type of RAM to be used (DDR, DDR2, DDR3, etc.) and the speed of the RAM (10600, 1333 MHz, etc.). The motherboard is broken down technologically into the “northbridge” and the “southbridge,” which will be discussed further in the next section. The chipset is designed by the manufacturer and cannot be upgraded or changed by the end user without replacing the entire motherboard. Therefore, it is important to carefully choose your motherboard and chipset before purchasing one that will meet your needs. \n \n 芯片組確定係統可以使用的CPU，系統提供的集成端口以及主板中包含的擴展插槽的類型。 主板的尺寸決定了具體的尺寸，形狀和佈局，而芯片組則決定了將哪些技術集成到主板本身中。 每個芯片組都定義了內存控制器，並指定了主板可以使用哪種RAM。 這包括要使用的RAM的類型（DDR，DDR2，DDR3等）和RAM的速度（10600、1333 MHz等）。 主板在技術上分為“北橋”和“南橋”，將在下一節中進一步討論。 該芯片組由製造商設計，如果不更換整個主板，最終用戶將無法升級或更改。 因此，在購買滿足您需求的主板和芯片組之前，請務必謹慎選擇。 \n \n \n Motherboard with identified northbridge and southbridge.\xa0 \n 具有確定的北橋和南橋的主板。 \n \n Northbridge\xa0北橋 \n \n The northbridge is known by several names. The first, and most common, is the memory controller hub (MCH), but it can also be called the graphics memory controller hub (GMCH) on Intel motherboards with integrated graphics on the motherboard. The northbridge serves as a connection between the CPU and the memory banks (RAM), PCIe x16, AGP graphics expansion slots, and other high-speed components. Essentially, the CPU operates extremely fast (such as in the 3 GHz or higher speeds), and the various components around the computer cannot operate as fast. The northbridge acts as a buffer to keep the high-speed devices feeding information to the CPU. While the memory may operate in the 1 to 2 GHz range, there is still lag between it and the CPU. The northbridge consolidates all of the high-speed inputs in order to maximize the efficiency of the CPU. \n \n 北橋有幾個名字。 第一個也是最常見的是內存控制器中樞（MCH），但也可以稱為Intel主板上具有集成顯卡的圖形內存控制器中樞（GMCH）。 北橋用作CPU和內存庫（RAM），PCIe x16，AGP圖形擴展插槽以及其他高速組件之間的連接。 從本質上講，CPU的運行速度非常快（例如3 GHz或更高的速度），並且計算機周圍的各種組件無法以如此快的速度運行。 北橋充當緩衝區，以保持高速設備向CPU提供信息。 雖然內存可以在1至2 GHz範圍內運行，但它與CPU之間仍然存在延遲。 北橋合併所有高速輸入，以最大程度地提高CPU的效率。 \n \n Southbridge\xa0南橋 \n \n \n \n The southbridge is known as the input/output controller hub (ICH). The southbridge serves as a connection between the CPU and the low-speed components of the computer. For example, the hard disk operates at very slow speeds in comparison to the CPU, but the input from the user (from the keyboard and mouse) occurs at even a slower rate than the hard disk. The ICH consolidates the input from the mass storage devices, DVD/CD drives, hard disk drives, floppy drives, USB ports, PCI expansion slots, CMOS, and the port cluster’s input/output, and then passes that information from the southbridge to the northbridge, and then on to the CPU for processing. This process maximizes the efficiency of the CPU’s ability to process data by removing the wait time for slower components on the southbridge and keeping the CPU processing other data during idle cycles. \n \n 南橋被稱為輸入/輸出控制器集線器（ICH）。 南橋用作CPU和計算機低速組件之間的連接。 例如，與CPU相比，硬盤以非常慢的速度運行，但是來自用戶（來自鍵盤和鼠標）的輸入發生的速度甚至比硬盤慢。 ICH整合了大容量存儲設備，DVD / CD驅動器，硬盤驅動器，軟盤驅動器，USB端口，PCI擴展插槽，CMOS和端口群集的輸入/輸出的輸入，然後將該信息從南橋傳遞到 北橋，然後到CPU進行處理。 通過消除對南橋上較慢的組件的等待時間，並使CPU在空閒週期內處理其他數據，此過程可最大程度地提高CPU處理數據的能力的效率。 \n \n \n \n Motherboard diagram.\xa0主板圖。 \n \n', 'tags': '', 'url': 'Expansion Slots\xa0擴展插槽 (P.44).html'}, {'title': 'Jumpers\xa0跳線 (P.45)', 'text': '\n Learning Objectives\xa0 學習目標 \n \n •\xa0Identify motherboard components and describe their basic functions. \n \xa0 \xa0識別主板組件並描述其基本功能。 \n \n The motherboard also contains pins that provide additional configuration options to the computer system. These pins can be covered by a jumper device, a piece of plastic with a metallic interior that makes an electrical connection between a set of pins. The jumper allows for particular features to be enabled or disabled on the motherboard. \n \n 主板還包含用於為計算機系統提供其他配置選項的引腳。 這些針腳可以用跨接器設備覆蓋，該跳線器是具有金屬內部的塑料件，在一組針腳之間建立電連接。 跳線允許在主板上啟用或禁用特定功能。 \n \n \n Blue jumper block.\xa0\xa0藍色跳線塊。 \n \n Fan Connectors\xa0風扇連接器 \n \n Each motherboard has several connectors for fans, specifically for the CPU fan and the case fan. These connectors provide power to the fans from the motherboard (ultimately from the power supply to the main motherboard power connector, then to the fans themselves). Some newer motherboards can provide PC health status, such as the fan speed, fan power, the board temperature, and other statistics. Most case fan connectors only have three pins, but the CPU fan connector can have four pins, with one pin dedicated to speed control. The fan speed can then be increased or decreased depending on the temperature of the CPU and the motherboard. As the temperature rises, a signal is sent to increase speed control, which in turn cools down the CPU and motherboard. \n \n 每個主板都有幾個風扇連接器，特別是CPU風扇和機箱風扇。 這些連接器從主板為風扇供電（最終從電源到主板的主電源連接器，再向風扇本身供電）。 一些較新的主板可以提供PC運行狀況，例如風扇速度，風扇功率，板溫度和其他統計信息。 大多數機箱風扇連接器只有三個引腳，但是CPU風扇連接器可以具有四個引腳，其中一個引腳專用於速度控制。 然後，可以根據CPU和主板的溫度來增加或減少風扇速度。 隨著溫度的升高，將發送信號以提高速度控制，從而降低CPU和主板的溫度。 \n \n \n CPU fan connected to motherboard. CPU風扇已連接至主板。 \n \n \n \n Case fan connector. \xa0\xa0機箱風扇連接器。 \n \n \n \n \n \n \n Case fan connector.\xa0機箱風扇連接器。 \n \n \n \n \n \n Audio Connectors\xa0音頻連接器 \n Motherboards also contain connectors for audio devices, such as auxiliary input or CD playback. Some cases feature audio jacks for headphones and microphones on the front of the case; these features require a cable that runs from the case front to the audio connector on the motherboard. Another connector on the motherboard may be for the Sony/Philips digital interchange format (SPDIF) that is connected from the motherboard to an optical SPDIF connection, known as a header. These various audio connectors look the same on the motherboard and are usually only distinguished by the labeling of the ports on the motherboard. They are typically located on one of the edges of the motherboard. \n \n 主板還包含音頻設備的接口，例如輔助輸入或CD播放。 某些機箱的正面配有耳機和麥克風的音頻插孔； 這些功能需要從機箱正面到主板上的音頻連接器的電纜。 主板上的另一個連接器可能是Sony / Philips數字交換格式（SPDIF），該連接器從主板連接到光學SPDIF連接，稱為接頭。 這些各種音頻連接器在主板上看起來相同，通常僅通過主板上端口的標記來區分。 它們通常位於主板的邊緣之一上。 \n \n \n \n Small motherboard with USB SPDIF connector (metal with purple cable) and video out connector (red with yellow cable). \n \n 小型主板，帶有USB SPDIF連接器（金屬和紫色電纜）和視頻輸出連接器（紅色和黃色電纜）。 \n \n \n \n \n \n Front-Panel Connectors\xa0前面板連接器 \n The front panel connectors are shown in the image below with the various multicolored cables. The connectors allow the motherboard to send/receive information from the power switch, power LED light, hard drive activity light, reset button, and case speaker (if installed). The connectors are often grouped on the front edge of the motherboard, and tend to be small and difficult to install. Often, a technician will have to use tweezers to connect these to the plugs. These connectors are easily unplugged by accident when doing other work inside the computer, so it is a good practice to always recheck these connections before replacing the cover. For example, if the computer won’t power on, it may not be a power supply issue, it may simply be that the “power switch” front panel connector became unplugged. If the power switch isn’t completely plugged into the motherboard, the computer will not turn on. \n \n 下圖顯示了前面板連接器以及各種彩色電纜。 通過連接器，母板可以從電源開關，電源LED指示燈，硬盤驅動器活動指示燈，重置按鈕和機箱揚聲器（如果已安裝）發送/接收信息。 連接器通常分組在主板的前邊緣，並且往往很小且難以安裝。 通常，技術人員將不得不使用鑷子將其連接到插頭。 在計算機內進行其他工作時，很容易意外拔下這些連接器，因此，最好在更換護蓋之前重新檢查這些連接。 例如，如果計算機無法打開電源，則可能不是電源問題，可能僅僅是“電源開關”前面板連接器已拔出。 如果電源開關未完全插入主板，則計算機將無法打開。 \n \n \n \n Front panel connectors. \xa0\xa0前面板連接器。 \n \n', 'tags': '', 'url': 'Jumpers\xa0跳線 (P.45).html'}, {'title': 'Processor History\xa0處理器歷史 (P.46)', 'text': "\n Learning Objectives 學習目標 \n \n • Identify motherboard components and describe their basic functions. \n \xa0 \xa0識別主板組件並描述其基本功能。 \n \n •\xa0 Place an array of microprocessors in approximate date or performance order. \n \xa0 \xa0將微處理器陣列按大約日期或性能順序放置。 \n \n •\xa0 Compare current microprocessor speeds and capabilities with those of 10 and 20 years ago, and describe the effect of processing capabilities. \n \xa0 \xa0將當前微處理器的速度和功能與10年前和20年前的速度和功能進行比較，並描述處理能力的影響。 \n \n The first microprocessors were manufactured in the 1970s. These microprocessors were built on NMOS (n-type metal-oxide semiconductor) logic and transistors. Early on, four-bit processors, like the Intel 4004, were common. The Intel 4004 had 2300 transistors. It performed 60,000 operations per second and addressed 640 bytes of memory, and operated at a speed of 740 kHz. The Intel 4004 cost approximately $200. Later in the decade, eight-bit processors such as the Motorola 6502 superseded the four-bit chips. The Motorola 6502 was an eight micrometer process technology chip that was four millimeters square. By the end of the 1970s, 16-bit processors emerged. \n \n 第一批微處理器於1970年代製造。 這些微處理器基於NMOS（n型金屬氧化物半導體）邏輯和晶體管構建。 早期，四位處理器（例如Intel 4004）很常見。 英特爾4004具有2300個晶體管。 它每秒執行60,000次操作，尋址640字節的內存，並以740 kHz的速度運行。 英特爾4004的價格約為200美元。 十年後，諸如摩托羅拉6502之類的八位處理器取代了四位芯片。 摩托羅拉6502是8毫米製程技術芯片，面積為4毫米見方。 到1970年代末，出現了16位處理器。 \n \n \n \n \n \n \n \n In the 1980s, 16-bit and 32-bit microprocessors were common among new designs, and CMOS (complementary metal-oxide semiconductor) technology overtook NMOS. Transistor count increased dramatically during the decade. The home computers of the 1980s predominantly used processors that were introduced in the 1970s. Versions of the Motorola 6502, first released in 1975, and the Zilog Z80 (1976), were at the core of many home computers, such as the Commodore 64 and the ZX Spectrum. Even the first-generation IBM PC used a processor from the 1970s: the Intel 8088. It was not until Intel's 80286 (in the IBM PC AT), and later the 80386, that 1980s computers used 1980s-designed processors. These late-decade processors offered higher clock speeds and 32-bit word length as well as new operating modes, such as protected mode, that were not available in earlier chips. Specifically, the Intel 80386 was a 32-bit chip. It had more than 275,000 transistors and could perform more than five million instructions every second. The 80386 cost approximately $299. Critically, in these more advanced chips, protected mode allowed the use of virtual memory and brought the graphical user interface to business computers, beginning with Microsoft Windows 2.0. \n \n 在1980年代，新設計中普遍使用16位和32位微處理器，並且CMOS（互補金屬氧化物半導體）技術取代了NMOS。在過去的十年中，晶體管的數量急劇增加。 1980年代的家用計算機主要使用1970年代引入的處理器。 1975年首次發布的Motorola 6502和Zilog Z80（1976）的版本是許多家用計算機的核心，例如Commodore 64和ZX Spectrum。甚至第一代IBM PC都使用了1970年代的處理器：Intel8088。直到Intel的80286（在IBM PC AT中）和後來的80386，1980年代的計算機才使用1980年代設計的處理器。這些近十年來的處理器提供了更高的時鐘速度和32位字長，以及新的工作模式，例如保護模式，這在早期的芯片中是不可用的。具體來說，英特爾80386是32位芯片。它擁有超過275,000個晶體管，每秒可執行超過500萬條指令。 80386的價格約為299美元。至關重要的是，在這些更高級的芯片中，從Microsoft Windows 2.0開始，保護模式允許使用虛擬內存，並將圖形用戶界面帶入商用計算機。 \n \n The 32-bit microprocessor dominated the consumer market in the 1990s. Processor clock speeds increased by more than tenfold between 1990 and 1999, and 64-bit processors began to emerge later in the decade. In the 1990s, microprocessors no longer used the same clock speed for the processor and the RAM. This technology allowed for the improvement in processor speeds. In 1993, Intel released the Pentium processor. The Pentium chip was a 60 MHz processor. It incorporated 3.1 million transistors and sold for approximately $875. \n \n 32位微處理器在1990年代主導了消費市場。 在1990年至1999年之間，處理器時鐘速度提高了十倍以上，並且在該十年後期開始出現64位處理器。 在1990年代，微處理器不再為處理器和RAM使用相同的時鐘速度。 這項技術可以提高處理器速度。 1993年，英特爾發布了奔騰處理器。 奔騰芯片是60 MHz處理器。 它裝有310萬個晶體管，售價約為875美元。 \n \n \n \n In the 2000s, 64-bit processors became mainstream. Microprocessor clock speeds reached a ceiling because cooling technology peaked. The ability to dissipate heat from the processor had reached a limit. Instead of implementing expensive and impractical cooling systems, manufacturers looked to other methods to improve processor performance by using multicore processor technology. Overclocking was born in the 1990s, but came into its own in the 2000s. With the introduction of multicore technology, processor costs began to drop dramatically. \n \n 在2000年代，64位處理器成為主流。 由於冷卻技術達到頂峰，微處理器時鐘速度達到了上限。 散發處理器熱量的能力已達到極限。 製造商沒有採用昂貴且不切實際的冷卻系統，而是尋求其他方法來使用多核處理器技術來提高處理器性能。 超頻誕生於1990年代，但在2000年代就已誕生。 隨著多核技術的引入，處理器成本開始急劇下降。 \n \n Off-the-shelf cooling systems designed for overclocked processors became more and more common, as did the concept of a PC designed for gaming. Over the decade, transistor counts increased by about an order of magnitude, a trend continued from previous decades. Processor sizes decreased about fourfold, from 180 nm to 45 nm. In 2007 \xa0 AMD \xa0 released the Athlon X2 processor line. The AMD Athlon X2 Brisbane series processed at a speed of 1.9 to 2.6 GHz and it included a 512 KB L2 cache. In 2012, \xa0 AMD \xa0 released the A10-5700 desktop processor. It included a 4M L2 cache and processed at a speed of 3.4 GHz, or 4.0 GHz in turbo mode. AMD’s A10-5800K, released at the same time as the A10-5700, included the same cache, but provided for processing speeds of 3.8 GHz or 4.2 GHz in turbo mode. In the 2010s, processors typically hold between 2.5 and 4 billion transistors. \n \n 設計用於超頻處理器的現成的冷卻系統變得越來越普遍，而設計用於遊戲的PC的概念也越來越普遍。 在過去的十年中，晶體管的數量增加了大約一個數量級，這一趨勢延續了過去的幾十年。 處理器尺寸從180 nm減少到45 nm約四倍。 AMD在2007年發布了Athlon X2處理器系列。 AMD Athlon X2 Brisbane系列以1.9至2.6 GHz的速度進行處理，並包含512 KB L2緩存。 2012年，AMD發布了A10-5700台式機處理器。 它包括一個4M L2高速緩存，並以3.4 GHz或Turbo模式下的4.0 GHz的速度進行處理。 AMD的A10-5800K與A10-5700同時發布，具有相同的緩存，但在Turbo模式下可提供3.8 GHz或4.2 GHz的處理速度。 在2010年代，處理器通常容納2.5至40億個晶體管。 \n \n CPU Technology (CPU技術) \n \n Over the years, various technologies have been added to the CPU to increase its speed and efficiency. The first of these technologies is called hyperthreading or HT technology. HT technology was originally developed by Intel. It allows the CPU to execute two “threads” within a single processor core. Essentially, the CPU emulates (or pretends to be) two CPUs instead of the single physical processor it really is. This allows for faster execution of programs. Consider a large classroom with many students, but only one instructor. If multiple students are asking questions, the instructor needs to answer everyone’s questions as quickly as possible. Instead of finishing the first question, then taking the second question, the hyperthreading would allow the instructor to begin answering the second question while the first question was still being answered. This effectively increases the instructor’s ability to answer more questions in a shorter period of time. \n \n 多年來，CPU已添加了各種技術以提高其速度和效率。 這些技術中的第一個稱為超線程或HT技術。 HT技術最初是由Intel開發的。 它允許CPU在單個處理器內核中執行兩個“線程”。 本質上，CPU模擬（或假裝為）兩個CPU，而不是實際的單個物理處理器。 這樣可以更快地執行程序。 考慮一個大教室，教室裡有很多學生，但只有一位老師。 如果有多個學生提出問題，則講師需要盡快回答每個人的問題。 無需完成第一個問題，而是處理第二個問題，超線程將允許教師在第一個問題仍在回答的同時開始回答第二個問題。 這有效地提高了教師在較短的時間內回答更多問題的能力。 \n \n The second technology, which is a vast improvement over hyperthreading, is called multicore design. In multicore designs, the processor (physically a single piece of hardware) contains multiple processors in the chip itself. These come in dual (two), quad (four), hexa (six), and octa (eight) core designs. An octa core design allows a single chip to contain up to eight processor cores. The eight processor cores enable simultaneous execution of eight different and unique processes. Previous to the multicore design, if you wanted multiple processors (like on a server), you had to have a special motherboard with multiple processor sockets and a special operating system that understood multiple processors. With a multicore design, a singular socket can be used, and any operating system can understand how to use the singular CPU (with multiple cores). \n \n 第二項技術是對超線程的巨大改進，稱為多核設計。 在多核設計中，處理器（實際上是單個硬件）在芯片本身中包含多個處理器。 這些芯片具有雙核（兩個），四核（四個），六核（六個）和八核（八個）設計。 八核心設計允許單個芯片包含多達八個處理器核心。 八個處理器內核可同時執行八個不同且唯一的進程。 在多核設計之前，如果要使用多個處理器（例如在服務器上），則必須擁有一個帶有多個處理器插槽的特殊主板和一個可以理解多個處理器的特殊操作系統。 通過多核設計，可以使用單個插槽，並且任何操作系統都可以理解如何使用單個CPU（具有多個內核）。 \n \n \n \n \n Intel Core 2 quad processor. \xa0\xa0英特爾酷睿2四核處理器。 \n \n \n Bus Speeds 巴士速度 \n \n The bus is the backbone communication system that transfers data between components inside a computer. The bus is measured in megahertz (MHz), which is the speed at which the bus operates. MHz is the number of clock-cycles that occur in a given second (MHz equals millions of times a second). While the motherboard’s bus operates at a fixed speed, the input/output ports and expansion slots all run at a unique speed determined by the devices connected to the respective slot. Each port can be configured or negotiated to run at the appropriate speed (up to a maximum value) for each device (such as FireWire, AGP, PCIe, PATA, SATA) as each connection type supports a different speed. \n \n 總線是骨幹通信系統，可在計算機內部組件之間傳輸數據。 總線以兆赫（MHz）為單位，這是總線運行的速度。 MHz是在給定的每秒內發生的時鐘週期數（MHz等於每秒數百萬次）。 主板總線以固定速度運行時，輸入/輸出端口和擴展插槽均以連接到相應插槽的設備確定的唯一速度運行。 每個端口都可以配置或協商為每個設備（例如FireWire，AGP，PCIe，PATA，SATA）以適當的速度（最大值）運行，因為每種連接類型都支持不同的速度。 \n \n \n \xa0 \n Detailed printed motherboard, showing a myriad of buses, the gold “paths” between board components. \n \xa0 \n 詳細的印刷主板，顯示了無數的總線，即主板組件之間的金色“通道”。 \n \xa0 \n \n 32-bit and 64-bit Processors\xa032位和64位處理器 \n \n \n \n There are both 32-bit and 64-bit processors. This is an important concept because if you are running a 32-bit processor or a 32-bit operating system, your computer can only access up to 4 GB of RAM. Windows will only access 3.25 GB of RAM if you are using a 32-bit version of Windows (such as Windows XP, or Vista/7 x86). The first 64-bit processor was the AMD Athlon 64. Those x64 processors are fully backward compatible with slower x86 software and devices. By using x64, the 4 GB limit of RAM is removed, allowing us to access 16 GB, 32 GB, 64 GB, or more of memory. \n \n 同時有32位和64位處理器。 這是一個重要的概念，因為如果您運行的是32位處理器或32位操作系統，則計算機最多只能訪問4 GB的RAM。 如果您使用32位版本的Windows（例如Windows XP或Vista / 7 x86），則Windows將僅訪問3.25 GB的RAM。 第一個64位處理器是AMD Athlon64。那些x64處理器與較慢的x86軟件和設備完全向後兼容。 通過使用x64，消除了4 GB的RAM限制，使我們可以訪問16 GB，32 GB，64 GB或更多的內存。 \n \n", 'tags': '', 'url': 'Processor History\xa0處理器歷史 (P.46).html'}, {'title': 'Virtualization\xa0虛擬化 (P.47)', 'text': '\n Learning Objectives學習目標 \n \n • Identify motherboard components and describe their basic functions. \n \xa0 \xa0識別主板組件並描述其基本功能。 \n \n \n Virtualization is a wonderful addition to our CPUs. Virtualization is taking the computer world by storm, saving us a ton of money in the process. In the past, if we wanted to run multiple operating systems, we would have to have multiple computers, but not anymore. Using hardware-assisted virtualization, we can enable a host program or host operating system (think a single physical computer) to run one or more guest operating systems (think virtual computers) inside the host OS’s desktop. In the image below, you can see a Macintosh OSX system running Windows in a program window, as well as Ubuntu Linux in another program window. In this example, we have three different operating systems in use on a single computer at the same time. There are many programs that allow this to occur, including the vastly popular commercial program VMWare and the freeware equivalent VirtualBox. \n \n 虛擬化是CPU的絕佳補充。 虛擬化正在席捲計算機世界，在此過程中為我們節省了大量資金。 過去，如果要運行多個操作系統，則必須有多台計算機，但現在不再需要。 使用硬件輔助虛擬化，我們可以使主機程序或主機操作系統（認為是一台物理計算機）在主機OS的桌面內運行一個或多個來賓操作系統（認為是虛擬計算機）。 在下面的圖像中，您可以在程序窗口中查看運行Windows的Macintosh OSX系統，並在另一個程序窗口中查看Ubuntu Linux。 在此示例中，我們在同一台計算機上同時使用三種不同的操作系統。 有許多程序可以使這種情況發生，包括廣受歡迎的商業程序VMWare和等同於免費軟件的VirtualBox。 \n \n \n \n \n Multiple operating systems running on a Mac.\xa0 在Mac上運行的多個操作系統。 \n \n Why would we want to run multiple systems, though? Well, what if you work for a company that only uses a custom program it built for Windows but you own a Macintosh and need to run that program at home? In the old days, you would buy a PC just to run that single program. Now you can just load up a Virtual Windows 7 machine in your Macintosh and run the program. On the server side, servers costs tens of thousands of dollars. If you want to run a small web server, you may not need that type of processing. So, hosting companies can use a single server and provide hundreds of virtual servers on the single server and you pay only a few dollars a month for access. \n \n 但是，為什麼我們要運行多個系統？ 好吧，如果您在一家僅使用為Windows構建的自定義程序但擁有Macintosh並需要在家運行該程序的公司工作，該怎麼辦？ 在過去，您只需要購買一台PC即可運行該程序。 現在，您只需在Macintosh中加載Virtual Windows 7計算機並運行該程序即可。 在服務器方面，服務器要花費數万美元。 如果要運行小型Web服務器，則可能不需要這種類型的處理。 因此，託管公司可以使用單個服務器，並在單個服務器上提供數百個虛擬服務器，而您每月只需支付幾美元的訪問費用。 \n \n Virtualization is continuing to expand and will continue to do so for the foreseeable future. Many companies and individuals are migrating to the cloud where virtual machines exist without the need for on-premises hardware. In cloud computing, infrastructure to run multiple operating systems or software is purchased from a cloud computing company as a service. \n \n 虛擬化正在繼續擴展，並將在可預見的將來繼續擴展。 許多公司和個人正在遷移到存在虛擬機而無需內部部署硬件的雲中。 在雲計算中，從雲計算公司作為服務購買了運行多個操作系統或軟件的基礎架構。 \n \n Integrated Graphics Processing Unit (GPU)\xa0集成圖形處理單元（GPU） \n \n The integrated graphics processing unit (GPU) allows for faster video processing, easier access to memory, and an overall lower cost to building a system. The idea is that instead of having a dedicated graphics card that could cost hundreds of dollars, the graphics are instead handled by a dedicated graphics coprocessor inside the CPU (the bottom, smaller chip in the image shown below). These work well for non-3D uses, such as web surfing, office products, DVD and video playback, or low-end games. However, if the system will be used for video/graphic production, computer aided design (CAD), or gaming, a discrete (dedicated) graphics card is more desirable, usually connected by using the PCIe x16 slot on the motherboard. \n \n 集成的圖形處理單元（GPU）允許更快的視頻處理，更容易的內存訪問以及總體上較低的構建系統成本。 這個想法是，圖形不是由可能花費數百美元的專用圖形卡，而是由CPU內部的專用圖形協處理器（如下圖所示，底部的較小芯片）處理。 這些功能非常適合非3D用途，例如網絡衝浪，辦公產品，DVD和視頻播放或低端遊戲。 但是，如果將系統用於視頻/圖形製作，計算機輔助設計（CAD）或遊戲，則通常需要使用母板上的PCIe x16插槽進行連接的獨立（專用）圖形卡。 \n \n \n \n A processor in which the GPU (bottom, smaller chip) and CPU (larger, top chip) are integrated on a single chip. \n \n 其中GPU（底部較小的芯片）和CPU（較大頂部的芯片）集成在一個芯片上的處理器。 \n \n \n', 'tags': '', 'url': 'Virtualization\xa0虛擬化 (P.47).html'}, {'title': 'CPU Cooling (CPU散熱) (P.48)', 'text': '\n Learning Objectives學習目標 \n \n •\xa0 Identify motherboard components and describe their basic functions. \n \xa0 \xa0識別主板組件並描述其基本功能。 \n \n Finally, we need to talk about how to cool the CPU when it is running on the motherboard. There are several options. First, there is the passive heat sink, which is a metal device with fins that radiates heat away from the processor. This is a very quiet method of cooling the CPU. However, most modern CPUs generate too much heat for a passive heat sink alone to be effective. Therefore, the passive heat sink is often coupled with an active heat sink, where a dedicated fan is connected to the top of the finned metal heat sink to draw the heat through the heat sink more effectively. \n \n 最後，我們需要討論在主板上運行CPU時如何冷卻。 有幾種選擇。 首先，有一個被動散熱器，它是一個帶有散熱片的金屬設備，可以將熱量從處理器散發出去。 這是冷卻CPU的非常安靜的方法。 但是，大多數現代CPU產生的熱量太多，僅被動散熱片就無法發揮作用。 因此，無源散熱器通常與有源散熱器耦合，在有源散熱器上，專用風扇連接到金屬翅片散熱器的頂部，以更有效地吸收熱量。 \n \n Before connecting the heat sink to the CPU, technicians should first apply thermal paste to the CPU to aid in heat transfer from the CPU to the metal heat sink. Therefore, your typical installation would be to place the CPU in the processor socket, apply thermal paste to it, then connect the finned heat sink to the top of the processor, and finally connect the dedicated fan to the top of the heat sink. A thermal paste is a phase change material that insulates the CPU. The paste is solid at room temperature, but changes to liquid at higher temperatures. When it turns to liquid, it eliminates any air and provides better insulation. \n \n 在將散熱器連接到CPU之前，技術人員應首先在CPU上塗導熱膏，以幫助熱量從CPU傳遞到金屬散熱器。 因此，典型的安裝方法是將CPU放入處理器插槽中，對其進行導熱粘貼，然後將翅片散熱器連接到處理器頂部，最後將專用風扇連接到散熱器頂部。 導熱膏是使CPU絕緣的相變材料。 糊劑在室溫下為固體，但在較高溫度下變為液體。 當變成液體時，它消除了空氣，並提供了更好的絕緣性。 \n \n Another option is to use a liquid cooled system. This operates by pumping a special liquid solution through the computer to a heat exchanger, where a fan cools the liquid before recirculation. These systems are only used in very high-performance systems and overclocked systems, and can be complicated to install and run. \n \n 另一種選擇是使用液體冷卻系統。 這是通過將特殊的液體溶液通過計算機泵送到熱交換器中來進行的，在熱交換器中，風扇在循環之前冷卻液體。 這些系統僅用於非常高性能的系統和超頻系統，並且安裝和運行起來可能很複雜。 \n \n When deciding on a cooling system, noise is a big concern. Passive systems are the quietest, whereas active systems involving fans are by far the noisiest. A liquid-cooled system often uses a much smaller fan to cool the liquid compared to larger CPU fans, and therefore, it is a quieter cooling method, yet quite expensive. \n \n 在選擇冷卻系統時，噪音是一個大問題。 到目前為止，無源系統是最安靜的，而涉及風扇的有源系統是最嘈雜的。 與較大的CPU風扇相比，液冷系統通常使用較小的風扇來冷卻液體，因此，這是一種更安靜的冷卻方法，但價格昂貴。 \n \n \n \n Computer fan.\xa0電腦風扇。 \n \n \n \n \n Liquid-cooled CPU.\xa0水冷式CPU。 \n \n', 'tags': '', 'url': 'CPU Cooling (CPU散熱) (P.48).html'}, {'title': 'HW2', 'text': '# use "python read url file data" search"\n# get "https://stackoverflow.com/questions/1393324/given-a-url-to-a-text-file-what-is-the-simplest-way-to-read-the-contents-of-the"\n# since we use python 3 therefore try to use the following script to get cp1a list\nimport urllib.request  # the lib that handles the url stuff\ntarget_url = "https://nfulist.herokuapp.com/?semester=1091&courseno=0762"\ncp1a = []\nfor line in urllib.request.urlopen(target_url):\n    cp1a.append(line.decode(\'utf-8\'))\n    #print(line.decode(\'utf-8\'), end = "") #utf-8 or iso8859-1 or whatever the page encoding scheme is\nprint(cp1a)\n# need to chop \\n for each line \n \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': '\n', 'tags': '', 'url': 'HW3.html'}, {'title': '10：List Overlap Comprehensions\xa0\xa0列表重疊理解', 'text': 'Exercise 10 (and Solution)\xa0練習10（和解決方案） \n \n This week’s exercise is going to be revisiting an old exercise (see \xa0 Exercise 5 ), except require the solution in a different way. \n 本週的練習將重溫舊的練習（請參閱練習5），但需要以其他方式解決。 \n \n Take two lists, say for example these two 拿兩個列表，舉例來說，這兩個 : \n \n \t a   =   [ 1 ,   1 ,   2 ,   3 ,   5 ,   8 ,   13 ,   21 ,   34 ,   55 ,   89 ] \n\t b   =   [ 1 ,   2 ,   3 ,   4 ,   5 ,   6 ,   7 ,   8 ,   9 ,   10 ,   11 ,   12 ,   13 ] \n \n and write a program that returns a list that contains only the elements that are common between the lists (without duplicates). Make sure your program works on two lists of different sizes. Write this \xa0 in one line of Python \xa0 using at least one list comprehension . ( Hint: Remember \xa0 list comprehensions \xa0 from Exercise 7 ). \n 並編寫一個程序，該程序返回一個列表，該列表僅包含列表之間的公共元素（無重複項）。 確保您的程序可以在兩個不同大小的列表上運行。 至少使用一個列表理解功能，用一行Python編寫此代碼。 （提示：請記住練習7中的列表理解）。 \n \n The original formulation of this exercise said to write the solution using one line of Python, but a few readers pointed out that this was impossible to do without using\xa0 set s that I had not yet discussed on the blog, so you can either choose to use the original directive and read about the\xa0 set \xa0command in Python 3.3 , or try to implement this on your own and use at least one list comprehension in the solution. \n 此練習的原始表述是使用一行Python編寫解決方案，但是一些讀者指出，如果不使用我在博客上尚未討論過的集，這是不可能做到的，因此您可以選擇使用 原始指令，並了解Python 3.3中的set命令，或者嘗試自己實現該指令並在解決方案中至少使用一個列表理解。 \n \n Extra\xa0額外 : \n • Randomly generate two lists to test this \n \xa0 \xa0隨機生成兩個列表進行測試 \n \n Discussion 討論區 \n Concepts for this week 本週的概念 : \n •\xa0 List comprehensions \n \xa0\xa0清單理解 \n •\xa0 Random numbers, continued \n \xa0 隨機數，續 \n \n List comprehensions\xa0清單理解 \n \n \n We already discussed list comprehensions in\xa0 Exercise 7 , but they can be made much more complicated. \n 我們已經在練習7中討論了列表理解，但是可以使它們複雜得多。 \n \n For example 舉例 : \n \n \t x   =   [ 1 ,   2 ,   3 ] \n\t y   =   [ 5 ,   10 ,   15 ] \n\t allproducts   =   [ a * b   for   a   in   x   for   b   in   y ] \n \n At the end of this piece of code, \xa0 allproducts \xa0 will contain the list \xa0 [5, 10, 15, 10, 20, 30, 15, 30, 45] . So you can put multiple for loops inside the comprehension. But you can also add more complicated conditionals : \n 在這段代碼的最後，所有產品都將包含列表[5、10、15、10、20、30、15、30、45]。   因此，您可以在理解中放入多個for循環。   但是您還可以添加更複雜的條件： \n \n \t x   =   [ 1 ,   2 ,   3 ] \n\t y   =   [ 5 ,   10 ,   15 ] \n\t customlist   =   [ a * b   for   a   in   x   for   b   in   y   if   a * b % 2   !=   0 ] \n \n Now \xa0 customlist \xa0 contains \xa0 [5, 15, 15, 45] \xa0 because only the odd products are added to the list. \n 現在，customlist包含[5、15、15、45]，因為只有奇數產品被添加到列表中。 \n \n In general, the list comprehension takes the form: \n 通常，列表理解採用以下形式： \n [ EXPRESSION   FOR_LOOPS   CONDITIONALS ] \n [EXPRESSION FOR_LOOPS條件] \n \n as shown in the examples above. \n 如以上示例所示。 \n \n Random numbers, continued 隨機數，續 \n \n Try to use the \xa0 Python random documentation \xa0 to figure out how to generate a random list. As a hint look below: \n \n \t a   =   random . sample ( range ( 100 ),   5 ) \n \n This line of code will leave \xa0 a \xa0 containing a list of 5 random numbers from 0 to 99. \n 嘗試使用Python隨機文檔來弄清楚如何生成隨機列表。   提示如下：   一個= random.sample（range（100），5）   這行代碼將保留一個包含從0到99的5個隨機數的列表。 \n \n Happy coding!\xa0祝您編碼愉快！ \n \n', 'tags': '', 'url': '10：List Overlap Comprehensions\xa0\xa0列表重疊理解.html'}, {'title': '11：Check Primality Functions\xa0檢查基本功能', 'text': 'Exercise 11 (and Solution)\xa0練習11（和解決方案） \n \n Ask the user for a number and determine whether the number is prime or not. (For those who have forgotten, a prime number is a number that has no divisors.). You can (and should!) use your answer to Exercise 4 to help you. Take this opportunity to practice using functions, described below. \n 向用戶詢問一個數字，並確定該數字是否為質數。 （對於那些忘記的人，質數是沒有除數的數。） 您可以（並且應該！）使用練習4的答案來幫助您。 藉此機會練習使用如下所述的功能。 \n \n Discussion\xa0討論區 \n Concepts for this week\xa0 本週的概念： \xa0 \n •\xa0 Functions\xa0 職能 \n •\xa0 Reusable functions\xa0 可重用功能 \n •\xa0 Default arguments\xa0 默認參數 \n \n Functions\xa0 職能 \n One of the tools programming gives us is the ability to break down problems into easier (or perhaps previously solved) or reusable subproblems. It is good practice to have a function have a single purpose, and the name of that function should hint at it’s purpose in some way. \n 編程提供給我們的工具之一是能夠將問題分解為更簡單（或可能先前解決）或可重用的子問題。   優良作法是讓一個功能具有單一目的，並且該功能的名稱應以某種方式暗示其目的。 \n \n Most programming languages have this idea of a function, subroutine, or subprogram. In Python, a function is a programming construct that allows exactly that. \n 大多數編程語言都具有函數，子例程或子程序的概念。   在Python中，函數是一種允許這樣做的編程構造。 \n Let’s look at a simple example \n 讓我們看一個簡單的例子： \n   def   get_integer ():   return   int ( input ( "Give me a number: " )) In this small example, we used the same code that asks a user for input as a tabbed line underneath this def statement. The def means that everything tabbed underneath is a function. The name get_integer() is just a name that I (the programmer) made up. If I just include this code inside a Python file and run it, nothing will happen - all I have done so far is wrapped my code inside of a function; I never told my program to actually RUN my function. \n 在這個小示例中，我們使用了相同的代碼，要求用戶在此def語句下方輸入為選項卡行。 def表示位於其下的所有選項卡都是一個函數。 名稱get_integer（）只是我（程序員）組成的名稱。 如果我只是將此代碼包含在Python文件中並運行它，則將不會發生任何事情-到目前為止，我所做的一切都將我的代碼包裝在一個函數中； 我從未告訴過我的程序實際運行我的功能。 \n \n    def   get_integer (): \n     return   int ( input ( "Give me a number: " )) \n\n   age   =   get_integer () \n   school_year   =   get_integer () \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n What I have done here is\xa0 called \xa0 the function (told it to run) by writing \xa0 age = get_integer() . When this line of code runs, what happens is the program will \xa0 execute \xa0 (run) the function by asking me for a number, then \xa0 returning \xa0 it (giving it back to me) by saving it inside the variable \xa0 age . Now when I want to ask the user for another number (this time representing the school year), I do the same thing with the variable \xa0 school_year . \n 通過寫age = get_integer（），我在這裡所做的被稱為函數（告訴它運行）。 當這行代碼運行時，程序將通過詢問我的數字來執行（運行）該函數，然後將其保存在變量age中以將其返回（交還給我）。 現在，當我想問用戶另一個數字（這次代表學年）時，我對變量school_year做同樣的事情。 \n \n Reusable functions 可重用功能 \n \n This is all well and good, but I can make my function do much more for me. Right now, my function will always ask the user for a number by printing the string "Give me a number: ". What if I want to print a different string every time I ask the user for a number, but otherwise use the same idea for the function? In other words, I want a variable parameter in my function that changes every time I call the function based on something I (the programmer) want to be different. \n 這一切都很好，但是我可以讓我的功能為我做更多的事情。   現在，我的函數將始終通過打印字符串“給我一個數字：”來要求用戶輸入數字。   如果每次我問用戶一個數字時都想打印一個不同的字符串，但對於該函數使用相同的想法怎麼辦？   換句話說，我希望函數中的變量參數在每次調用函數時都根據我（程序員）希望與眾不同的事物而改變。 \n \n I can do this by passing (giving) my function a variable. Like this \n 我可以通過傳遞（給我的）函數一個變量來做到這一點。   像這樣： \n \n \n    def   get_integer ( help_text ): \n     return   int ( input ( help_text )) \n \n Now what I can do when I call the function is something like this: \n \n    def   get_integer ( help_text ): \n     return   int ( input ( help_text )) \n\n   age   =   get_integer ( "Tell me your age: " ) \n   school_year   =   get_integer ( "What grade are you in? " ) \n   if   age   >   15 : \n     print ( "You are over the age of 15" ) \n   print ( "You are in grade "   +   str ( school_year )) \n \n \n Now it is easier for a user to use the program, because the help text is different. \n These variables you pass to functions are called \xa0 variables , \xa0 parameters , or \xa0 arguments . \n 現在，由於幫助文本不同，因此使用戶更容易使用該程序。 \n 傳遞給函數的這些變量稱為變量，參數或參數。 \n \n Default arguments\xa0默認參數 \n \n In the example above, once I have added an argument to my function, I always have to give an argument when I call the function. I can’t forget to give the get_integer() function from above a string to print to the screen. In some cases, I want there to be a “default” behavior for my function that happens when I create an argument for it but don’t give it any. \n 在上面的示例中，在向函數添加參數後，在調用函數時始終必須提供參數。 我不能忘記從字符串上方給get_integer（）函數打印到屏幕上。 在某些情況下，我希望函數有一個“默認”行為，這種行為會在我為其創建參數但不提供任何參數時發生。 \n In the example above, if I don’t give a custom string (which may be 95% of the time I use this function), I just want the\xa0 input() \xa0 line to say \xa0 "Give me a number: " \xa0 and I want to save myself the trouble of writing this every single time I call the function. So what I can do is give my function \xa0 default arguments . Like so: \n 在上面的示例中，如果我不提供自定義字符串（使用該函數的時間可能是95％），我只想讓input（）行說“給我一個數字：”，而我想 節省了我每次調用該函數時編寫此代碼的麻煩。 所以我能做的就是給我的函數提供默認參數。 像這樣： \n \n    def   get_integer ( help_text = "Give me a number: " ): \n     return   int ( input ( help_text )) \n What happens now is I can use the function in two ways: by giving it an argument and by NOT giving it an argument. \n 現在發生的事情是我可以通過兩種方式使用該函數：通過給它一個參數和不給它一個參數。 \n \n   def   get_integer ( help_text = "Give me a number: " ):   return   int ( input ( help_text ))   age   =   get_integer ( "Tell me your age: " )   school_year   =   get_integer ()   if   age   >   15 :   print ( "You are over the age of 15" )   print ( "You are in grade "   +   str ( school_year )) The first time I call the function, it will print\xa0 "Tell me your age: " , but the second time, it will print \xa0 "Give me a number: " , because I did not give it a string and it will execute the default behavior. \n 第一次調用該函數時，它將打印“告訴我您的年齡：”，但是第二次它將顯示“給我一個數字：”，因為我沒有給它提供字符串，它將執行默認行為 。 \n \n Recap\xa0回顧 \n \n What a function does is wrap a piece of code that we want to reuse, labels it, and allows us to use it again relatively easily. You can add variables to the functions to make your code even MORE reusable, and you can add default arguments to these variables. \n Functions are a bit strange to deal with at first, but once you master them, they will be your savior in programming. Besides, the whole point of learning programming is abstraction, problem solving, breaking down problems, and that’s exactly what functions are all about. \n 函數的作用是包裝我們要重用的一段代碼，對其進行標記，並允許我們相對容易地再次使用它。 您可以將變量添加到函數中，以使代碼更加可重用，並且可以將默認參數添加到這些變量中。 \n 一開始處理函數有點奇怪，但是一旦掌握了這些函數，它們就會成為您編程中的救星。 此外，學習編程的重點是抽象，解決問題，解決問題，而這正是功能的全部內容。 \n \n Happy coding!\xa0祝您編碼愉快！ \n \n', 'tags': '', 'url': '11：Check Primality Functions\xa0檢查基本功能.html'}, {'title': '12：List Ends\xa0清單結尾', 'text': '\n Exercise 12 (and Solution)\xa0練習12（和解決方案） \n \n Write a program that takes a list of numbers (for example, a = [5, 10, 15, 20, 25]) and makes a new list of only the first and last elements of the given list. For practice, write this code inside a function. \n 編寫一個程序，該程序接受一個數字列表（例如，a = [5、10、15、20、25]），並僅給出給定列表的第一個和最後一個元素組成一個新列表。 為了練習，請在函數內編寫此代碼。 \n \n Concepts to practice\xa0練習概念 \n \n •\xa0Lists and properties of lists \n \xa0 \xa0列表和列表屬性 \n • List comprehensions (maybe) \n \xa0 \xa0 列表理解（也許） \n •\xa0Functions \n \xa0 \xa0 職能 \n \n Happy coding!\xa0祝您編碼愉快！ \n \n', 'tags': '', 'url': '12：List Ends\xa0清單結尾.html'}]};